{
  "openapi": "3.1.0",
  "info": {
    "title": "BakeMate",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register New User",
        "description": "Create new user.",
        "operationId": "register_new_user_api_v1_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/access-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login For Access Token",
        "description": "OAuth2 compatible token login, get an access token for future requests.\nUsername is the email.",
        "operationId": "login_for_access_token_api_v1_auth_login_access_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_api_v1_auth_login_access_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/verify-email-request": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request Email Verification",
        "description": "Endpoint for a logged-in user to request a new email verification link.",
        "operationId": "request_email_verification_api_v1_users_verify_email_request_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/verify-email/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Verify Email",
        "description": "Endpoint to handle email verification from the link sent to the user.",
        "operationId": "verify_email_api_v1_users_verify_email__get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Read Users Me",
        "description": "Test endpoint to get current user, requires active (verified) status.",
        "operationId": "read_users_me_api_v1_users_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/users/users/all": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Read All Users",
        "description": "Retrieve all users. Only accessible by superusers.",
        "operationId": "read_all_users_api_v1_users_users_all_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRead"
                  },
                  "title": "Response Read All Users Api V1 Users Users All Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingredients/": {
      "post": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Create Ingredient",
        "description": "Create a new ingredient for the authenticated user.",
        "operationId": "create_ingredient_api_v1_ingredients__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Read Ingredients",
        "description": "Retrieve all ingredients for the authenticated user.",
        "operationId": "read_ingredients_api_v1_ingredients__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IngredientRead"
                  },
                  "title": "Response Read Ingredients Api V1 Ingredients  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ingredients/{ingredient_id}": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Read Ingredient",
        "description": "Retrieve a specific ingredient by ID for the authenticated user.",
        "operationId": "read_ingredient_api_v1_ingredients__ingredient_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ingredient Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Update Ingredient",
        "description": "Update an ingredient for the authenticated user.",
        "operationId": "update_ingredient_api_v1_ingredients__ingredient_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ingredient Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Delete Ingredient",
        "description": "Delete an ingredient for the authenticated user.",
        "operationId": "delete_ingredient_api_v1_ingredients__ingredient_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ingredient Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create Recipe",
        "description": "Create a new recipe for the authenticated user.",
        "operationId": "create_recipe_api_v1_recipes__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Read Recipes",
        "description": "Retrieve all recipes for the authenticated user.",
        "operationId": "read_recipes_api_v1_recipes__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecipeRead"
                  },
                  "title": "Response Read Recipes Api V1 Recipes  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/{recipe_id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Read Recipe",
        "description": "Retrieve a specific recipe by ID for the authenticated user.",
        "operationId": "read_recipe_api_v1_recipes__recipe_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Recipes"
        ],
        "summary": "Update Recipe",
        "description": "Update a recipe for the authenticated user.",
        "operationId": "update_recipe_api_v1_recipes__recipe_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Recipe Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete Recipe",
        "description": "Delete a recipe for the authenticated user.",
        "operationId": "delete_recipe_api_v1_recipes__recipe_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "recipe_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Recipe Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/recipes/trigger-cost-update/ingredient/{ingredient_id}": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Trigger Recipe Cost Updates For Ingredient",
        "description": "Manually trigger recalculation of costs for all recipes using a specific ingredient.\nThis is useful if an ingredient_s cost is updated globally.\nRequires appropriate authorization (e.g., admin or owner of the ingredient).",
        "operationId": "trigger_recipe_cost_updates_for_ingredient_api_v1_recipes_trigger_cost_update_ingredient__ingredient_id__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ingredient Id"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/pricing/configuration": {
      "get": {
        "tags": [
          "Pricing"
        ],
        "summary": "Get Pricing Configuration",
        "description": "Retrieve the pricing configuration for the authenticated user.\nIf no configuration exists, default values might be returned by the service or it might return None.\nThe service currently returns None if not found, so we might want to create one with defaults if it doesn_t exist.\nFor now, let_s assume it can be None and the frontend would prompt to create one.\nAlternatively, create one on user registration with defaults.",
        "operationId": "get_pricing_configuration_api_v1_pricing_configuration_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingConfigurationRead"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Pricing"
        ],
        "summary": "Create Or Update Pricing Configuration",
        "description": "Create or update the pricing configuration for the authenticated user.",
        "operationId": "create_or_update_pricing_configuration_api_v1_pricing_configuration_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PricingConfigurationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingConfigurationRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/orders/": {
      "post": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Create Order",
        "operationId": "create_order_api_v1_orders__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Read Orders",
        "operationId": "read_orders_api_v1_orders__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderRead"
                  },
                  "title": "Response Read Orders Api V1 Orders  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}": {
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Read Order",
        "operationId": "read_order_api_v1_orders__order_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Update Order",
        "operationId": "update_order_api_v1_orders__order_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Delete Order",
        "operationId": "delete_order_api_v1_orders__order_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/quotes/": {
      "post": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Create Quote",
        "operationId": "create_quote_api_v1_orders_quotes__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Read Quotes",
        "operationId": "read_quotes_api_v1_orders_quotes__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/QuoteStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteRead"
                  },
                  "title": "Response Read Quotes Api V1 Orders Quotes  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/quotes/{quote_id}": {
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Read Quote",
        "operationId": "read_quote_api_v1_orders_quotes__quote_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "quote_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Quote Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Update Quote",
        "operationId": "update_quote_api_v1_orders_quotes__quote_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "quote_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Quote Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Delete Quote",
        "operationId": "delete_quote_api_v1_orders_quotes__quote_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "quote_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Quote Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/quotes/{quote_id}/convert-to-order": {
      "post": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Convert Quote To Order",
        "operationId": "convert_quote_to_order_api_v1_orders_quotes__quote_id__convert_to_order_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "quote_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Quote Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/create-payment-intent": {
      "post": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Create Payment Intent For Order",
        "operationId": "create_payment_intent_for_order_api_v1_orders__order_id__create_payment_intent_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Create Payment Intent For Order Api V1 Orders  Order Id  Create Payment Intent Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/invoice/pdf": {
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Get Order Invoice Pdf",
        "operationId": "get_order_invoice_pdf_api_v1_orders__order_id__invoice_pdf_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/{order_id}/client-portal-url": {
      "get": {
        "tags": [
          "Orders & Quotes"
        ],
        "summary": "Get Client Portal Url For Order",
        "operationId": "get_client_portal_url_for_order_api_v1_orders__order_id__client_portal_url_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Client Portal Url For Order Api V1 Orders  Order Id  Client Portal Url Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/calendar/events/": {
      "post": {
        "tags": [
          "Calendar"
        ],
        "summary": "Create Calendar Event",
        "description": "Create a new calendar event for the authenticated user.",
        "operationId": "create_calendar_event_api_v1_calendar_events__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Read Calendar Events",
        "description": "Retrieve calendar events for the authenticated user within a date range.",
        "operationId": "read_calendar_events_api_v1_calendar_events__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start date/time for filtering events (ISO format)",
              "title": "Start Date"
            },
            "description": "Start date/time for filtering events (ISO format)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End date/time for filtering events (ISO format)",
              "title": "End Date"
            },
            "description": "End date/time for filtering events (ISO format)"
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CalendarEventType"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by event type",
              "title": "Event Type"
            },
            "description": "Filter by event type"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 2000,
              "minimum": 1,
              "default": 1000,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEventRead"
                  },
                  "title": "Response Read Calendar Events Api V1 Calendar Events  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/calendar/events/{event_id}": {
      "get": {
        "tags": [
          "Calendar"
        ],
        "summary": "Read Calendar Event",
        "description": "Retrieve a specific calendar event by ID for the authenticated user.",
        "operationId": "read_calendar_event_api_v1_calendar_events__event_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Calendar"
        ],
        "summary": "Update Calendar Event",
        "description": "Update a calendar event for the authenticated user.",
        "operationId": "update_calendar_event_api_v1_calendar_events__event_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Event Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Calendar"
        ],
        "summary": "Delete Calendar Event",
        "description": "Delete a calendar event for the authenticated user.",
        "operationId": "delete_calendar_event_api_v1_calendar_events__event_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Event Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create Task",
        "description": "Create a new task for the authenticated user.",
        "operationId": "create_task_api_v1_tasks__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Read Tasks",
        "description": "Retrieve tasks for the authenticated user, with optional filters.",
        "operationId": "read_tasks_api_v1_tasks__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TaskStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Priority"
            }
          },
          {
            "name": "due_date_start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter tasks due on or after this date (ISO format)",
              "title": "Due Date Start"
            },
            "description": "Filter tasks due on or after this date (ISO format)"
          },
          {
            "name": "due_date_end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter tasks due on or before this date (ISO format)",
              "title": "Due Date End"
            },
            "description": "Filter tasks due on or before this date (ISO format)"
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskRead"
                  },
                  "title": "Response Read Tasks Api V1 Tasks  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Read Task",
        "description": "Retrieve a specific task by ID for the authenticated user.",
        "operationId": "read_task_api_v1_tasks__task_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update Task",
        "description": "Update a task for the authenticated user.",
        "operationId": "update_task_api_v1_tasks__task_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete Task",
        "description": "Delete a task for the authenticated user.",
        "operationId": "delete_task_api_v1_tasks__task_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/send-weekly-digest": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Trigger Weekly Digest",
        "description": "Manually trigger the weekly digest email generation for the current user.\n(In production, this would be a cron job, this endpoint is for testing/dev)",
        "operationId": "trigger_weekly_digest_api_v1_tasks_send_weekly_digest_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/expenses/": {
      "post": {
        "tags": [
          "Expenses"
        ],
        "summary": "Create Expense",
        "description": "Create a new expense for the authenticated user, optionally with a receipt upload.\nMax receipt size: 3MB.",
        "operationId": "create_expense_api_v1_expenses__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_expense_api_v1_expenses__post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Read Expenses",
        "description": "Retrieve expenses for the authenticated user, with optional filters.",
        "operationId": "read_expenses_api_v1_expenses__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ExpenseCategory"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseRead"
                  },
                  "title": "Response Read Expenses Api V1 Expenses  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/expenses/{expense_id}": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Read Expense",
        "description": "Retrieve a specific expense by ID for the authenticated user.",
        "operationId": "read_expense_api_v1_expenses__expense_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Expense Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Expenses"
        ],
        "summary": "Update Expense",
        "description": "Update an expense for the authenticated user. Can also update/replace or remove the receipt.\nMax receipt size: 3MB.",
        "operationId": "update_expense_api_v1_expenses__expense_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Expense Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_expense_api_v1_expenses__expense_id__put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Expenses"
        ],
        "summary": "Delete Expense",
        "description": "Delete an expense for the authenticated user.",
        "operationId": "delete_expense_api_v1_expenses__expense_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "expense_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Expense Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/expenses/receipts/{filename}": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Get Receipt File",
        "description": "Download a receipt file. **Note:** This is a simplified local serving mechanism.\nIn production, use a proper file serving solution (e.g., S3 presigned URLs, CDN).",
        "operationId": "get_receipt_file_api_v1_expenses_receipts__filename__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mileage/": {
      "post": {
        "tags": [
          "Mileage"
        ],
        "summary": "Create Mileage Log",
        "description": "Create a new mileage log for the authenticated user.",
        "operationId": "create_mileage_log_api_v1_mileage__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MileageLogCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileageLogRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Mileage"
        ],
        "summary": "Read Mileage Logs",
        "description": "Retrieve mileage logs for the authenticated user, with optional filters.",
        "operationId": "read_mileage_logs_api_v1_mileage__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "purpose",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Purpose"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MileageLogRead"
                  },
                  "title": "Response Read Mileage Logs Api V1 Mileage  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mileage/{log_id}": {
      "get": {
        "tags": [
          "Mileage"
        ],
        "summary": "Read Mileage Log",
        "description": "Retrieve a specific mileage log by ID for the authenticated user.",
        "operationId": "read_mileage_log_api_v1_mileage__log_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "log_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Log Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileageLogRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mileage"
        ],
        "summary": "Update Mileage Log",
        "description": "Update a mileage log for the authenticated user.",
        "operationId": "update_mileage_log_api_v1_mileage__log_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "log_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Log Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MileageLogUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileageLogRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mileage"
        ],
        "summary": "Delete Mileage Log",
        "description": "Delete a mileage log for the authenticated user.",
        "operationId": "delete_mileage_log_api_v1_mileage__log_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "log_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Log Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MileageLogRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/profit-and-loss": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Profit and Loss Report",
        "description": "Generate a Profit and Loss report for the specified period.\nOutput can be JSON, CSV, or PDF (PDF is placeholder).",
        "operationId": "get_profit_and_loss_report_api_v1_reports_profit_and_loss_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date for the report period (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date for the report period (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Output format for the report",
              "enum": [
                "json",
                "csv",
                "pdf"
              ],
              "default": "json",
              "title": "Output Format"
            },
            "description": "Output format for the report"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Profit And Loss Report Api V1 Reports Profit And Loss Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/sales-by-product": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Sales by Product Report",
        "description": "Generate a Sales by Product report for the specified period.\nOutput can be JSON, CSV, or PDF (PDF is placeholder).",
        "operationId": "get_sales_by_product_report_api_v1_reports_sales_by_product_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date for the report period (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date for the report period (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Output format for the report",
              "enum": [
                "json",
                "csv",
                "pdf"
              ],
              "default": "json",
              "title": "Output Format"
            },
            "description": "Output format for the report"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Sales By Product Report Api V1 Reports Sales By Product Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/ingredient-usage": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Ingredient Usage Report",
        "description": "Generate an Ingredient Usage report based on completed orders for the specified period.\nOutput can be JSON, CSV, or PDF (PDF is placeholder).",
        "operationId": "get_ingredient_usage_report_api_v1_reports_ingredient_usage_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Start date for the report period (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "description": "Start date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "description": "End date for the report period (YYYY-MM-DD)",
              "title": "End Date"
            },
            "description": "End date for the report period (YYYY-MM-DD)"
          },
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Output format for the report",
              "enum": [
                "json",
                "csv",
                "pdf"
              ],
              "default": "json",
              "title": "Output Format"
            },
            "description": "Output format for the report"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Ingredient Usage Report Api V1 Reports Ingredient Usage Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reports/low-stock": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Low Stock Report",
        "description": "Generate a Low Stock report for ingredients below their threshold.\nOutput can be JSON, CSV, or PDF (PDF is placeholder).",
        "operationId": "get_low_stock_report_api_v1_reports_low_stock_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "output_format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Output format for the report",
              "enum": [
                "json",
                "csv",
                "pdf"
              ],
              "default": "json",
              "title": "Output Format"
            },
            "description": "Output format for the report"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Low Stock Report Api V1 Reports Low Stock Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shop/manage/configuration/": {
      "get": {
        "tags": [
          "Shop Management"
        ],
        "summary": "Get Shop Configuration",
        "description": "Retrieve the shop configuration for the authenticated baker.",
        "operationId": "get_shop_configuration_api_v1_shop_manage_configuration__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ShopConfigurationRead"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Shop Configuration Api V1 Shop Manage Configuration  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Shop Management"
        ],
        "summary": "Update Shop Configuration",
        "description": "Update the shop configuration for the authenticated baker.\nAssumes user has one config; if not, an ID would be needed.",
        "operationId": "update_shop_configuration_api_v1_shop_manage_configuration__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopConfigurationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopConfigurationRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Shop Management"
        ],
        "summary": "Create Shop Configuration",
        "description": "Create a new shop configuration for the authenticated baker.\nA baker can only have one shop configuration.",
        "operationId": "create_shop_configuration_api_v1_shop_manage_configuration__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopConfigurationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopConfigurationRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Shop Management"
        ],
        "summary": "Delete Shop Configuration",
        "description": "Delete the shop configuration for the authenticated baker.",
        "operationId": "delete_shop_configuration_api_v1_shop_manage_configuration__delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopConfigurationRead"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/shop/manage/configuration/embed-snippet/": {
      "get": {
        "tags": [
          "Shop Management"
        ],
        "summary": "Get Shop Embed Snippet",
        "description": "Get the embeddable HTML/JS snippet for the baker's shop.\nRequires an active shop configuration with a slug.",
        "operationId": "get_shop_embed_snippet_api_v1_shop_manage_configuration_embed_snippet__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Shop Embed Snippet Api V1 Shop Manage Configuration Embed Snippet  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/shop/public/{shop_slug}": {
      "get": {
        "tags": [
          "Public Shop"
        ],
        "summary": "View Public Shop",
        "description": "Retrieve the public view of a shop by its slug.\nOnly shows active shops that allow online orders.",
        "operationId": "view_public_shop_api_v1_shop_public__shop_slug__get",
        "parameters": [
          {
            "name": "shop_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Shop Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicShopView"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/shop/public/{shop_slug}/order": {
      "post": {
        "tags": [
          "Public Shop"
        ],
        "summary": "Place Order From Public Shop",
        "description": "Place an order from a public shop.\nThe order will be created in the baker's main order system with status 'new-online'.\nConfirmation emails will be sent.",
        "operationId": "place_order_from_public_shop_api_v1_shop_public__shop_slug__order_post",
        "parameters": [
          {
            "name": "shop_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Shop Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopOrderCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/inventory/ingredients/{ingredient_id}/adjust-stock": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Adjust Ingredient Stock",
        "description": "Manually adjust the stock quantity for a specific ingredient.",
        "operationId": "adjust_ingredient_stock_api_v1_inventory_ingredients__ingredient_id__adjust_stock_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ingredient Id"
            }
          },
          {
            "name": "quantity_change",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Amount to change stock by. Positive to add, negative to deduct.",
              "title": "Quantity Change"
            },
            "description": "Amount to change stock by. Positive to add, negative to deduct."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/inventory/run-low-stock-check": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Trigger Low Stock Check",
        "description": "Manually trigger a low stock check for all ingredients for the current user.\nThis will also attempt to send email alerts if configured and items are low.\nReturns a list of ingredients found to be low in stock.",
        "operationId": "trigger_low_stock_check_api_v1_inventory_run_low_stock_check_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Trigger Low Stock Check Api V1 Inventory Run Low Stock Check Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/marketing/segments/{segment_type}/contacts": {
      "get": {
        "tags": [
          "Marketing"
        ],
        "summary": "Get Segment Contacts",
        "description": "Get a list of contacts belonging to a specific marketing segment.\nValid segment_types: \"top_customers\", \"dormant_customers\".",
        "operationId": "get_segment_contacts_api_v1_marketing_segments__segment_type__contacts_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "segment_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Segment Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactRead"
                  },
                  "title": "Response Get Segment Contacts Api V1 Marketing Segments  Segment Type  Contacts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/marketing/campaigns/send": {
      "post": {
        "tags": [
          "Marketing"
        ],
        "summary": "Send Marketing Campaign",
        "description": "Send a marketing campaign to a specified segment.\nThe `html_content` should be the fully crafted HTML email body.",
        "operationId": "send_marketing_campaign_api_v1_marketing_campaigns_send_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Send Marketing Campaign Api V1 Marketing Campaigns Send Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/marketing/campaigns/template/basic": {
      "post": {
        "tags": [
          "Marketing"
        ],
        "summary": "Get Basic Campaign Template Preview",
        "description": "Generate a basic HTML email template string. \nThe UI would use this as a starting point for crafting an email.",
        "operationId": "get_basic_campaign_template_preview_api_v1_marketing_campaigns_template_basic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_basic_campaign_template_preview_api_v1_marketing_campaigns_template_basic_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Basic Campaign Template Preview Api V1 Marketing Campaigns Template Basic Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_create_expense_api_v1_expenses__post": {
        "properties": {
          "date_in": {
            "type": "string",
            "format": "date",
            "title": "Date In"
          },
          "description_in": {
            "type": "string",
            "title": "Description In"
          },
          "amount_in": {
            "type": "number",
            "title": "Amount In"
          },
          "category_in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ],
            "default": "other"
          },
          "vendor_in": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor In"
          },
          "notes_in": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes In"
          },
          "receipt_file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt File"
          }
        },
        "type": "object",
        "required": [
          "date_in",
          "description_in",
          "amount_in"
        ],
        "title": "Body_create_expense_api_v1_expenses__post"
      },
      "Body_get_basic_campaign_template_preview_api_v1_marketing_campaigns_template_basic_post": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "default": "Your Special Offer!"
          },
          "body_paragraph": {
            "type": "string",
            "title": "Body Paragraph",
            "default": "We have something amazing just for you. Check it out now before it_s too late!"
          },
          "cta_text": {
            "type": "string",
            "title": "Cta Text",
            "default": "Learn More"
          },
          "cta_url": {
            "type": "string",
            "title": "Cta Url",
            "default": "https://example.com/offer"
          }
        },
        "type": "object",
        "title": "Body_get_basic_campaign_template_preview_api_v1_marketing_campaigns_template_basic_post"
      },
      "Body_login_for_access_token_api_v1_auth_login_access_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_api_v1_auth_login_access_token_post"
      },
      "Body_update_expense_api_v1_expenses__expense_id__put": {
        "properties": {
          "date_in": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date In"
          },
          "description_in": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description In"
          },
          "amount_in": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount In"
          },
          "category_in": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ]
          },
          "vendor_in": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor In"
          },
          "notes_in": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes In"
          },
          "remove_receipt": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remove Receipt",
            "default": false
          },
          "receipt_file": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt File"
          }
        },
        "type": "object",
        "title": "Body_update_expense_api_v1_expenses__expense_id__put"
      },
      "CalendarEventCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "start_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Start Datetime"
          },
          "end_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "End Datetime"
          },
          "is_all_day": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is All Day",
            "default": false
          },
          "event_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CalendarEventType"
              },
              {
                "type": "null"
              }
            ],
            "default": "personal_event"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_datetime",
          "end_datetime",
          "user_id"
        ],
        "title": "CalendarEventCreate"
      },
      "CalendarEventRead": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "start_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Start Datetime"
          },
          "end_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "End Datetime"
          },
          "is_all_day": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is All Day",
            "default": false
          },
          "event_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CalendarEventType"
              },
              {
                "type": "null"
              }
            ],
            "default": "personal_event"
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "google_calendar_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Calendar Id"
          },
          "google_event_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Event Id"
          }
        },
        "type": "object",
        "required": [
          "title",
          "start_datetime",
          "end_datetime",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "CalendarEventRead"
      },
      "CalendarEventType": {
        "type": "string",
        "enum": [
          "order_due_date",
          "task_deadline",
          "personal_event",
          "reminder"
        ],
        "title": "CalendarEventType"
      },
      "CalendarEventUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "start_datetime": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Datetime"
          },
          "end_datetime": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Datetime"
          },
          "is_all_day": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is All Day"
          },
          "event_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CalendarEventType"
              },
              {
                "type": "null"
              }
            ]
          },
          "color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Color"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          },
          "google_calendar_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Calendar Id"
          },
          "google_event_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Event Id"
          }
        },
        "type": "object",
        "title": "CalendarEventUpdate"
      },
      "CampaignBody": {
        "properties": {
          "segment_type": {
            "type": "string",
            "title": "Segment Type"
          },
          "subject": {
            "type": "string",
            "title": "Subject"
          },
          "html_content": {
            "type": "string",
            "title": "Html Content"
          }
        },
        "type": "object",
        "required": [
          "segment_type",
          "subject",
          "html_content"
        ],
        "title": "CampaignBody"
      },
      "ContactRead": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "company_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Name"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "address_line1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line1"
          },
          "address_line2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state_province": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State Province"
          },
          "postal_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postal Code"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country",
            "default": "US"
          },
          "contact_type": {
            "$ref": "#/components/schemas/ContactType",
            "default": "customer"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "ContactRead"
      },
      "ContactType": {
        "type": "string",
        "enum": [
          "customer",
          "supplier",
          "other"
        ],
        "title": "ContactType"
      },
      "ExpenseCategory": {
        "type": "string",
        "enum": [
          "ingredients",
          "supplies",
          "utilities",
          "rent",
          "marketing",
          "fees",
          "other"
        ],
        "title": "ExpenseCategory"
      },
      "ExpenseRead": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "amount": {
            "type": "number",
            "title": "Amount"
          },
          "category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpenseCategory"
              },
              {
                "type": "null"
              }
            ],
            "default": "other"
          },
          "vendor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vendor"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "receipt_filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt Filename"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "receipt_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Receipt Url"
          }
        },
        "type": "object",
        "required": [
          "date",
          "description",
          "amount",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "ExpenseRead"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngredientCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "cost": {
            "type": "number",
            "title": "Cost"
          },
          "density": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Density"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "quantity_on_hand": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity On Hand",
            "default": 0
          },
          "low_stock_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Low Stock Threshold"
          }
        },
        "type": "object",
        "required": [
          "name",
          "unit",
          "cost",
          "user_id"
        ],
        "title": "IngredientCreate"
      },
      "IngredientRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "cost": {
            "type": "number",
            "title": "Cost"
          },
          "density": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Density"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "quantity_on_hand": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity On Hand"
          },
          "low_stock_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Low Stock Threshold"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "unit",
          "cost",
          "density",
          "user_id",
          "quantity_on_hand",
          "low_stock_threshold",
          "created_at",
          "updated_at"
        ],
        "title": "IngredientRead"
      },
      "IngredientUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost"
          },
          "density": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Density"
          },
          "quantity_on_hand": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity On Hand"
          },
          "low_stock_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Low Stock Threshold"
          }
        },
        "type": "object",
        "title": "IngredientUpdate"
      },
      "MileageLogCreate": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Location"
          },
          "end_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Location"
          },
          "distance": {
            "type": "number",
            "title": "Distance"
          },
          "purpose": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purpose"
          },
          "vehicle_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Identifier"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "reimbursement_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reimbursement Rate"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "date",
          "distance",
          "user_id"
        ],
        "title": "MileageLogCreate"
      },
      "MileageLogRead": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "start_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Location"
          },
          "end_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Location"
          },
          "distance": {
            "type": "number",
            "title": "Distance"
          },
          "purpose": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purpose"
          },
          "vehicle_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Identifier"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "reimbursement_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reimbursement Rate"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "reimbursement_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reimbursement Amount"
          }
        },
        "type": "object",
        "required": [
          "date",
          "distance",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "MileageLogRead"
      },
      "MileageLogUpdate": {
        "properties": {
          "date": {
            "type": "null",
            "title": "Date"
          },
          "start_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Location"
          },
          "end_location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Location"
          },
          "distance": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Distance"
          },
          "purpose": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Purpose"
          },
          "vehicle_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Identifier"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "reimbursement_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reimbursement Rate"
          }
        },
        "type": "object",
        "title": "MileageLogUpdate"
      },
      "OrderCreate": {
        "properties": {
          "due_date": {
            "type": "string",
            "format": "date-time",
            "title": "Due Date"
          },
          "delivery_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Method"
          },
          "notes_to_customer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes To Customer"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          },
          "deposit_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Amount"
          },
          "deposit_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Due Date"
          },
          "balance_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Due Date"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemCreate"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "inquiry"
          }
        },
        "type": "object",
        "required": [
          "due_date",
          "user_id"
        ],
        "title": "OrderCreate"
      },
      "OrderItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "unit_price": {
            "type": "number",
            "title": "Unit Price"
          }
        },
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit_price"
        ],
        "title": "OrderItemCreate"
      },
      "OrderItemRead": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "unit_price": {
            "type": "number",
            "title": "Unit Price"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "total_price": {
            "type": "number",
            "title": "Total Price"
          }
        },
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit_price",
          "id",
          "total_price"
        ],
        "title": "OrderItemRead"
      },
      "OrderRead": {
        "properties": {
          "due_date": {
            "type": "string",
            "format": "date-time",
            "title": "Due Date"
          },
          "delivery_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Method"
          },
          "notes_to_customer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes To Customer"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          },
          "deposit_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Amount"
          },
          "deposit_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Due Date"
          },
          "balance_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Due Date"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "order_number": {
            "type": "string",
            "title": "Order Number"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "payment_status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "order_date": {
            "type": "string",
            "format": "date-time",
            "title": "Order Date"
          },
          "subtotal": {
            "type": "number",
            "title": "Subtotal"
          },
          "tax": {
            "type": "number",
            "title": "Tax"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "balance_due": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Due"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderItemRead"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "stripe_payment_intent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Payment Intent Id"
          }
        },
        "type": "object",
        "required": [
          "due_date",
          "id",
          "user_id",
          "order_number",
          "status",
          "payment_status",
          "order_date",
          "subtotal",
          "tax",
          "total_amount",
          "balance_due",
          "created_at",
          "updated_at"
        ],
        "title": "OrderRead"
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "inquiry",
          "quote_sent",
          "confirmed",
          "in_progress",
          "ready_for_pickup",
          "completed",
          "cancelled",
          "new-online"
        ],
        "title": "OrderStatus"
      },
      "OrderUpdate": {
        "properties": {
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date"
          },
          "delivery_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Method"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "payment_status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "notes_to_customer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes To Customer"
          },
          "internal_notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal Notes"
          },
          "items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrderItemCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Items"
          },
          "deposit_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Amount"
          },
          "deposit_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deposit Due Date"
          },
          "balance_due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance Due Date"
          },
          "stripe_payment_intent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Payment Intent Id"
          },
          "stripe_checkout_session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Checkout Session Id"
          }
        },
        "type": "object",
        "title": "OrderUpdate"
      },
      "PaymentStatus": {
        "type": "string",
        "enum": [
          "unpaid",
          "deposit_paid",
          "paid_in_full",
          "refunded"
        ],
        "title": "PaymentStatus"
      },
      "PricingConfigurationRead": {
        "properties": {
          "hourly_rate": {
            "type": "number",
            "title": "Hourly Rate"
          },
          "overhead_per_month": {
            "type": "number",
            "title": "Overhead Per Month"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "hourly_rate",
          "overhead_per_month",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "PricingConfigurationRead"
      },
      "PricingConfigurationUpdate": {
        "properties": {
          "hourly_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hourly Rate"
          },
          "overhead_per_month": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Overhead Per Month"
          }
        },
        "type": "object",
        "title": "PricingConfigurationUpdate"
      },
      "PublicShopProductView": {
        "properties": {
          "recipe_id": {
            "type": "string",
            "format": "uuid",
            "title": "Recipe Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "price": {
            "type": "number",
            "title": "Price"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "name",
          "price"
        ],
        "title": "PublicShopProductView"
      },
      "PublicShopView": {
        "properties": {
          "shop_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shop Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email"
          },
          "theme_color_primary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Primary"
          },
          "theme_color_secondary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Secondary"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/PublicShopProductView"
            },
            "type": "array",
            "title": "Products",
            "default": []
          },
          "delivery_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Options"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          }
        },
        "type": "object",
        "title": "PublicShopView"
      },
      "QuoteCreate": {
        "properties": {
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuoteItemCreate"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuoteStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "draft"
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "QuoteCreate"
      },
      "QuoteItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "unit_price": {
            "type": "number",
            "title": "Unit Price"
          }
        },
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit_price"
        ],
        "title": "QuoteItemCreate"
      },
      "QuoteItemRead": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "unit_price": {
            "type": "number",
            "title": "Unit Price"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "total_price": {
            "type": "number",
            "title": "Total Price"
          }
        },
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit_price",
          "id",
          "total_price"
        ],
        "title": "QuoteItemRead"
      },
      "QuoteRead": {
        "properties": {
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "quote_number": {
            "type": "string",
            "title": "Quote Number"
          },
          "status": {
            "$ref": "#/components/schemas/QuoteStatus"
          },
          "quote_date": {
            "type": "string",
            "format": "date-time",
            "title": "Quote Date"
          },
          "subtotal": {
            "type": "number",
            "title": "Subtotal"
          },
          "tax": {
            "type": "number",
            "title": "Tax"
          },
          "total_amount": {
            "type": "number",
            "title": "Total Amount"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuoteItemRead"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "converted_to_order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Converted To Order Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "quote_number",
          "status",
          "quote_date",
          "subtotal",
          "tax",
          "total_amount",
          "created_at",
          "updated_at"
        ],
        "title": "QuoteRead"
      },
      "QuoteStatus": {
        "type": "string",
        "enum": [
          "draft",
          "sent",
          "accepted",
          "declined",
          "expired"
        ],
        "title": "QuoteStatus"
      },
      "QuoteUpdate": {
        "properties": {
          "expiry_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiry Date"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QuoteStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "items": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/QuoteItemCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Items"
          }
        },
        "type": "object",
        "title": "QuoteUpdate"
      },
      "RecipeCreate": {
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "steps": {
            "type": "string",
            "title": "Steps"
          },
          "yield_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Quantity"
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/RecipeIngredientLinkCreate"
            },
            "type": "array",
            "title": "Ingredients",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "name",
          "steps"
        ],
        "title": "RecipeCreate"
      },
      "RecipeIngredientLinkCreate": {
        "properties": {
          "ingredient_id": {
            "type": "string",
            "format": "uuid",
            "title": "Ingredient Id"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          }
        },
        "type": "object",
        "required": [
          "ingredient_id",
          "quantity",
          "unit"
        ],
        "title": "RecipeIngredientLinkCreate"
      },
      "RecipeIngredientLinkRead": {
        "properties": {
          "ingredient_id": {
            "type": "string",
            "format": "uuid",
            "title": "Ingredient Id"
          },
          "ingredient_name": {
            "type": "string",
            "title": "Ingredient Name"
          },
          "quantity": {
            "type": "number",
            "title": "Quantity"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          },
          "cost": {
            "type": "number",
            "title": "Cost"
          }
        },
        "type": "object",
        "required": [
          "ingredient_id",
          "ingredient_name",
          "quantity",
          "unit",
          "cost"
        ],
        "title": "RecipeIngredientLinkRead"
      },
      "RecipeRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "steps": {
            "type": "string",
            "title": "Steps"
          },
          "yield_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Quantity"
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "calculated_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Calculated Cost"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/RecipeIngredientLinkRead"
            },
            "type": "array",
            "title": "Ingredients",
            "default": []
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "name",
          "description",
          "steps",
          "yield_quantity",
          "yield_unit",
          "calculated_cost",
          "created_at",
          "updated_at"
        ],
        "title": "RecipeRead"
      },
      "RecipeUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "steps": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Steps"
          },
          "yield_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Quantity"
          },
          "yield_unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Yield Unit"
          },
          "ingredients": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RecipeIngredientLinkCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredients"
          }
        },
        "type": "object",
        "title": "RecipeUpdate"
      },
      "ShopConfigurationCreate": {
        "properties": {
          "shop_slug": {
            "type": "string",
            "title": "Shop Slug"
          },
          "shop_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shop Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "theme_color_primary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Primary",
            "default": "#FFB6C1"
          },
          "theme_color_secondary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Secondary",
            "default": "#F9F7F5"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShopStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "inactive"
          },
          "allow_online_orders": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Online Orders",
            "default": false
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Order Amount"
          },
          "delivery_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Options"
          },
          "payment_methods_accepted": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Methods Accepted",
            "default": [
              "stripe"
            ]
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ShopProduct"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Products",
            "default": []
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "shop_slug",
          "user_id"
        ],
        "title": "ShopConfigurationCreate"
      },
      "ShopConfigurationRead": {
        "properties": {
          "shop_slug": {
            "type": "string",
            "title": "Shop Slug"
          },
          "shop_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shop Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "theme_color_primary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Primary",
            "default": "#FFB6C1"
          },
          "theme_color_secondary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Secondary",
            "default": "#F9F7F5"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShopStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "inactive"
          },
          "allow_online_orders": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Online Orders",
            "default": false
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Order Amount"
          },
          "delivery_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Options"
          },
          "payment_methods_accepted": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Methods Accepted",
            "default": [
              "stripe"
            ]
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ShopProduct"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Products",
            "default": []
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "shop_slug",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "ShopConfigurationRead"
      },
      "ShopConfigurationUpdate": {
        "properties": {
          "shop_slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shop Slug"
          },
          "shop_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shop Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "theme_color_primary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Primary"
          },
          "theme_color_secondary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme Color Secondary"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShopStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "allow_online_orders": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Allow Online Orders"
          },
          "min_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Order Amount"
          },
          "max_order_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Order Amount"
          },
          "delivery_options": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Options"
          },
          "payment_methods_accepted": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Methods Accepted"
          },
          "products": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ShopProduct"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Products"
          }
        },
        "type": "object",
        "title": "ShopConfigurationUpdate"
      },
      "ShopOrderCreate": {
        "properties": {
          "customer_name": {
            "type": "string",
            "title": "Customer Name"
          },
          "customer_email": {
            "type": "string",
            "title": "Customer Email"
          },
          "customer_phone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Customer Phone"
          },
          "delivery_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Address"
          },
          "delivery_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delivery Instructions"
          },
          "pickup_time_slot": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pickup Time Slot"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ShopOrderItemCreate"
            },
            "type": "array",
            "title": "Items",
            "default": []
          },
          "shop_slug": {
            "type": "string",
            "title": "Shop Slug"
          }
        },
        "type": "object",
        "required": [
          "customer_name",
          "customer_email",
          "shop_slug"
        ],
        "title": "ShopOrderCreate"
      },
      "ShopOrderItemCreate": {
        "properties": {
          "recipe_id": {
            "type": "string",
            "format": "uuid",
            "title": "Recipe Id"
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Quantity"
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "quantity"
        ],
        "title": "ShopOrderItemCreate"
      },
      "ShopProduct": {
        "properties": {
          "recipe_id": {
            "type": "string",
            "format": "uuid",
            "title": "Recipe Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "price": {
            "type": "number",
            "title": "Price"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "is_available": {
            "type": "boolean",
            "title": "Is Available",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "recipe_id",
          "name",
          "price"
        ],
        "title": "ShopProduct"
      },
      "ShopStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "maintenance"
        ],
        "title": "ShopStatus"
      },
      "TaskCreate": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "pending"
          },
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "default": 0
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "title",
          "user_id"
        ],
        "title": "TaskCreate"
      },
      "TaskRead": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": "pending"
          },
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority",
            "default": 0
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "TaskRead"
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "pending",
          "in_progress",
          "completed",
          "deferred"
        ],
        "title": "TaskStatus"
      },
      "TaskUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "due_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Due Date"
          },
          "priority": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Priority"
          },
          "order_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Id"
          }
        },
        "type": "object",
        "title": "TaskUpdate"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserRead": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "is_active",
          "is_superuser"
        ],
        "title": "UserRead"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/v1/auth/login/access-token"
          }
        }
      }
    }
  }
}
